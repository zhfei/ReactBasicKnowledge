
路由：
根据url的不同切换对应的组件，实现spa（单页面应用）在页面切换时不会刷新，更加接近原生体验

下载：
先进入到react-app的工程目录下，然后执行下面的命令安装路由工具 react-router-dom
cnpm install react-router-dom --save

react-router 只提供了一些核心的API
react-router-dom 增加了更多的功能


路由模式：
Hash     hashRouter (hash模式 带#号 刷新的时候页面不会丢失)
Browser  browserRouter (历史记录模式 不带#号 是通过历史记录api进行页面切换的，刷新会丢失。本地模式不会)


2.index.js引用路由模块


3.路由默认 包裹根组件
在index.js中进行根组件包裹
ReactDOM.render(
    <BrowserRouter> <App/> </BrowserRouter>,
    document.getElementById('root')
)


4.引用 import {Route} from 'react-router-dom'



5.配置 Route
路由导航 Link to="去哪里"

{/*Switch:使用此修饰，可以避免多个匹配项都展示出来，只展示一项*/}
<Switch>

    {/*path路径匹配用的是模糊匹配，to="/home"会匹配两种"/"，"/home"类型。*/}
    {/*exact:表示使用绝对匹配*/}
    {/*<Route path="/" exact component={Home}/>*/}
    <Route path="/home" component={Home}/>
    <Route path="/phone" component={Phone}/>
    <Route path="/network" component={HomeNetWork} />
    <Route path="/network" component={HomeNetWork} />
    <Route path="/user" component={User}/>
    <Route path="/user/UserA" component={UserA}/>

    {/*Redirect:重定向*/}
    <Redirect path="/" to="/user/UserA" exact />
</Switch>


6.withRouter
让不是通过路由切换的组件，也具有路由切换组件的三个属性(location, match, history)

编程式导航
props.history.push('/页面路径')
链接式导航
<NavLink to="/home">点我去home组件页</NavLink>


7.路由传参
params方式传参
1.在路由规则中设置接收的参数：<Route path="/user/:id" component={User}/>
2.传递参数，在路由跳转时：<NavLink to="/user/我是路由传递的参数id">点我去user组件页</NavLink>
3.接收传递的值，在组件中：
console.log("收到通过路由方式传递过来的参数，参数为："+this.props.match.params.id)
优势：刷新页面，参数还保存着
劣势：url中只能传递字符串，参数多时不方便传递

query方式传参：
1.不用在路由配置中进行参数配置
2.直接发生数据：
<NavLink to={{pathname:"/network",query:{name:"小明"}}}>点我去network组件页</NavLink>
3.接收传递的值：
console.log("接收到query方式发送的参数："+this.props.location.query.name)












